<?php
/**
 * This source file is part of GotCms.
 *
 * GotCms is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GotCms is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along
 * with GotCms. If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>.
 *
 * PHP Version >=5.3
 *
 * @category Gc_Tests
 * @package  Library
 * @author   Pierre Rambaud (GoT) <pierre.rambaud86@gmail.com>
 * @license  GNU/LGPL http://www.gnu.org/licenses/lgpl-3.0.html
 * @link     http://www.got-cms.com
 */

namespace Gc\View\Helper;

use Zend\View\Renderer\PhpRenderer as View;
use Gc\Core\Config as CoreConfig;
use Gc\View\Model as ViewModel;
use Gc\View\Resolver\TemplatePathStack;
use stdClass;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-17 at 20:40:07.
 *
 * @group Gc
 * @category Gc_Tests
 * @package  Library
 */
class PartialTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Partial
     */
    protected $object;

    /**
     * @var ViewModel
     */
    protected $view;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $coreConfig = new CoreConfig();
        $coreConfig->setValue('stream_wrapper_is_active', 1);
        $this->object = new Partial($coreConfig);
        $coreConfig->setValue('stream_wrapper_is_active', 0);

        $this->view = ViewModel::fromArray(
            array(
                'name' => 'View Name',
                'identifier' => 'view-identifier',
                'description' => 'View Description',
                'content' => 'View Content'
            )
        );
        $this->view->save();

        $view              = new View();
        $templatePathStack = new TemplatePathStack();
        $templatePathStack->addPath(GC_TEMPLATE_PATH);
        $view->setResolver($templatePathStack);
        $this->object->setView($view);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    protected function tearDown()
    {
        $this->view->delete();
        unset($this->object);
    }

    /**
     * Test
     *
     * @return void
     */
    public function testInvoke()
    {
        $model = $this->getMockForAbstractClass('Gc\Core\Object');
        $model->setData(
            array(
                'foo' => 'bar',
                'bar' => 'baz'
            )
        );

        $templatePathStack = $this->object->getView()->resolver();
        $templatePathStack->addPath(__DIR__ . '/_files/views');
        //With object
        $this->object->partialCounter = true;
        $return                       = $this->object->__invoke('partial-vars.phtml', $model);
        $this->object->partialCounter = false;

        foreach ($model->toArray() as $key => $value) {
            $string = sprintf('%s: %s', $key, $value);
            $this->assertContains($string, $return);
        }

        //With array
        $return = $this->object->__invoke(
            'partial-vars.phtml',
            array(
                'foo' => 'bar',
                'bar' => 'baz'
            )
        );

        foreach ($model->toArray() as $key => $value) {
            $string = sprintf('%s: %s', $key, $value);
            $this->assertContains($string, $return);
        }

        //With object
        $model      = new stdClass();
        $model->foo = 'bar';
        $model->bar = 'baz';

        $return = $this->object->__invoke('partial-vars.phtml', $model);

        foreach (get_object_vars($model) as $key => $value) {
            $string = sprintf('%s: %s', $key, $value);
            $this->assertContains($string, $return);
        }

        //With object
        $this->object->setObjectKey('foo');
        $model      = new stdClass();
        $model->foo = 'bar';
        $model->bar = 'baz';
        $return     = $this->object->__invoke('partial-obj.phtml', $model);
        $this->assertNotContains('No object model passed', $return);


        $this->assertInstanceOf('Gc\View\Helper\Partial', $this->object->__invoke(''));
        $this->assertEquals('View Content', $this->object->__invoke('view-identifier'));

        $this->setExpectedException('Zend\View\Exception\RuntimeException');
        $this->assertFalse($this->object->__invoke('fake-view-identifier'));
    }
}
