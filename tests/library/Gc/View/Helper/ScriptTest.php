<?php
/**
 * This source file is part of GotCms.
 *
 * GotCms is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GotCms is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along
 * with GotCms. If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>.
 *
 * PHP Version >=5.3
 *
 * @category Gc_Tests
 * @package  Library
 * @author   Pierre Rambaud (GoT) <pierre.rambaud86@gmail.com>
 * @license  GNU/LGPL http://www.gnu.org/licenses/lgpl-3.0.html
 * @link     http://www.got-cms.com
 */

namespace Gc\View\Helper;

use Gc\Script\Model as ScriptModel;
use Gc\Document\Model as DocumentModel;
use Gc\Registry;
use Zend\View\Renderer\PhpRenderer as View;
use Zend\View\Model\ViewModel;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-17 at 20:40:07.
 *
 * @group Gc
 * @category Gc_Tests
 * @package  Library
 */
class ScriptTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Script
     */
    protected $object;

    /**
     * @var ScriptModel
     */
    protected $script;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->script = ScriptModel::fromArray(
            array(
                'name' => 'Script name',
                'identifier' => 'script-identifier',
                'description' => 'Script description',
                'content' => 'script Content',
            )
        );
        $this->script->save();
        $serviceManager = Registry::get('Application')->getServiceManager();
        $this->object   = new Script($serviceManager);
        $serviceManager->setAllowOverride(true);
        $serviceManager->setService(
            'currentDocument',
            DocumentModel::fromArray(
                array(
                    'id' => 1,
                )
            )
        );
        $serviceManager->setAllowOverride(false);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    protected function tearDown()
    {
        unset($this->object);
        $this->script->delete();
        unset($this->script);
    }

    /**
     * Test
     *
     * @return void
     */
    public function testInvoke()
    {
        ob_start();
        $this->object->__invoke('script-identifier');
        $data = ob_get_clean();
        $this->assertEquals('script Content', $data);
        $this->assertFalse($this->object->__invoke('fake-script-identifier'));
    }

    /**
     * Test
     *
     * @return void
     */
    public function testInvokeWithTemplates()
    {
        $this->object = new Script(Registry::get('Application')->getServiceManager());
        ob_start();
        $this->object->__invoke('script-identifier');
        $data = ob_get_clean();
        $this->assertEquals('script Content', $data);
        $this->assertFalse($this->object->__invoke('fake-script-identifier'));
    }

    /**
     * Test
     *
     * @return void
     */
    public function testInvokeWithoutConfiguration()
    {
        $serviceManager = Registry::get('Application')->getServiceManager();

        $config    = $serviceManager->get('Config');
        $oldConfig = $config;
        unset($config['db']);
        $serviceManager->setAllowOverride(true);
        $serviceManager->setService('Config', $config);

        $this->object = new Script(Registry::get('Application')->getServiceManager());
        ob_start();
        $this->object->__invoke('script-identifier');
        $data = ob_get_clean();
        $this->assertEquals('script Content', $data);
        $this->assertFalse($this->object->__invoke('fake-script-identifier'));

        $serviceManager->setService('Config', $oldConfig);
    }

    /**
     * Test
     *
     * @return void
     */
    public function testGetParam()
    {
        ob_start();
        $this->object->__invoke('script-identifier', array('key' => 'value'));
        $data = ob_get_clean();
        $this->assertEquals('value', $this->object->getParam('key'));
        $this->assertNull($this->object->getParam('fake-key'));
    }

    /**
     * Test
     *
     * @return void
     */
    public function testGetDocument()
    {
        $parent = new ViewModel();
        $parent->setTemplate('layout');
        $view     = new View();
        $renderer = Registry::get('Application')->getServiceManager()->get('Zend\View\Renderer\PhpRenderer');
        $view->setHelperPluginManager($renderer->getHelperPluginManager());
        $view->plugin('view_model')->setRoot($parent);
        $view->resolver()->addPath(__DIR__ . '/_files/views');
        $this->object->setView($view);
        $this->assertInstanceOf('Gc\Document\Model', $this->object->getDocument());
    }

    /**
     * Test
     *
     * @return void
     */
    public function testGetRequest()
    {
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Request', $this->object->getRequest());
    }

    /**
     * Test
     *
     * @return void
     */
    public function testGetResponse()
    {
        $this->assertInstanceOf('Zend\Http\PhpEnvironment\Response', $this->object->getResponse());
    }

    /**
     * Test
     *
     * @return void
     */
    public function testGetServiceLocator()
    {
        $this->assertInstanceOf('Zend\ServiceManager\ServiceManager', $this->object->getServiceLocator());
    }

    /**
     * Test
     *
     * @return void
     */
    public function testPlugin()
    {
        $this->assertInstanceOf('Zend\Mvc\Controller\Plugin\Redirect', $this->object->plugin('redirect'));
    }

    /**
     * Test
     *
     * @return void
     */
    public function testCall()
    {
        $this->assertInstanceOf('Zend\Mvc\Controller\Plugin\Redirect', $this->object->redirect());
    }

    /**
     * Test
     *
     * @return void
     */
    public function testCallWithIsCallablePlugin()
    {
        $this->assertInstanceOf('Zend\Mvc\Controller\Plugin\Params', $this->object->params());
    }
}
