<?php
/**
 * This source file is part of GotCms.
 *
 * GotCms is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GotCms is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along
 * with GotCms. If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>.
 *
 * PHP Version >=5.3
 *
 * @category Gc_Tests
 * @package  Modules
 * @author   Pierre Rambaud (GoT) <pierre.rambaud86@gmail.com>
 * @license  GNU/LGPL http://www.gnu.org/licenses/lgpl-3.0.html
 * @link     http://www.got-cms.com
 */

namespace ActivityLog\Model;

use Gc\User\Model as UserModel;
use ActivityLog\Module;
use Zend\EventManager\Event;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-06 at 13:53:49.
 *
 * @group Modules
 * @category Gc_Tests
 * @package  Modules
 */
class TemplateTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Comment
     */
    protected $object;

    /**
     * @var Module
     */
    protected $boostrap;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->boostrap = new Module();
        $this->boostrap->install();
        $this->object = new Template;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    protected function tearDown()
    {
        $this->boostrap->uninstall();
        unset($this->boostrap);
        unset($this->object);
    }

    /**
     * Test
     *
     * @return void
     */
    public function testRenderWithHelperVariable()
    {
        $template = array();
        $template['template'] = '<?= $this->event->getParam(\'user\')->getName() ?> has saved the user model ' .
            '<a href="<?= $this->url(\'config/user/edit\', array(\'id\' => $this->event->getParam' .
            '(\'object\')->getId())) ?>"><?= $this->event->getParam(\'object\')->getId() ?></a>';
        $template['event_identifier'] = 'Gc\\User\\Model';
        $template['event_name'] = 'on.something';
        $result   = 'Pierre Rambaud has saved the user model ' .
            '<a href="/admin/config/user/edit/1">1</a>';

        $event = new Event();
        $user  = new UserModel();
        $user->setFirstname('Pierre');
        $user->setLastname('Rambaud');
        $event->setParam('user', $user);
        $user = new UserModel();
        $user->setData('id', 1);
        $event->setParam('object', $user);

        $this->assertEquals($result, $this->object->render($event, $template));
    }

    /**
     * Test
     *
     * @return void
     */
    public function testGetTemplates()
    {
        $this->assertInternalType('array', $this->object->getTemplates());
    }

    /**
     * Test
     *
     * @return void
     */
    public function testGetTemplateWithFakeIdShouldReturnFalse()
    {
        $this->assertFalse($this->object->getTemplate('test'));
    }

    /**
     * Test
     *
     * @return void
     */
    public function testGetTemplateWithIdShouldReturnFalse()
    {
        $this->assertInternalType('array', $this->object->getTemplate(1));
    }

    /**
     * Test
     *
     * @return void
     */
    public function testAddEventShouldReturnNull()
    {
        $this->assertNull($this->object->addEvent('test', 1, null));
    }
}
